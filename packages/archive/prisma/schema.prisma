// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email String @unique
  password String
  showIDs String[] @db.ObjectId
  shows Show[] @relation(fields: [showIDs], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Song {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  originalArtist String
  notes String
  tracks Track[] @relation("SongToTracks")
}


model Show {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime
  eventName String
  notes String
  venue Venue @relation(fields: [venueId], references: [id]) // onDelete: Cascade
  venueId String @db.ObjectId
  setlist Set[]

  attendeeIDs String[] @db.ObjectId
  attendees User[] @relation(fields: [attendeeIDs], references: [id])
  archiveUrl String?
  relisten String?
  nugsNetId String?
  bandcampAlbumId String?
  audioSources AudioSource[]
  // comments: [Comment!]! @relation("CommentToShow", onDelete: Cascade)
}

model AudioSource {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String // provider specific identifier (i.e. AIRSHOW2022-04-28 in https://archive.org/details/AIRSHOW2022-04-28 or 6hIXXfYPaU1YLPfmCOhHd3 in https://open.spotify.com/album/6hIXXfYPaU1YLPfmCOhHd3)
  provider AudioSourceProvider
  show Show @relation(fields: [showId], references: [id]) // onDelete: SetNull
  showId String @db.ObjectId
  // TODO: eventually tracks would be sweet
}

model Set {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  position Int
  tracks Track[]
  trackIDs String[] @db.ObjectId
  show Show @relation(fields: [showId], references: [id]) // onDelete: SetNull
  showId String @db.ObjectId
}

model Track {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  notes String[]
  segue Boolean
  position Int
  song Song @relation("SongToTracks", fields: [songId], references: [id]) // onDelete: SetNull
  songId String @db.ObjectId
  set Set @relation(fields: [setID], references: [id] ) // onDelete: Cascade
  setID String @db.ObjectId
  videos Video[] @relation(fields: [videoIDs], references: [id]) // onDelete: SetNull
  videoIDs String[] @db.ObjectId
}

model Venue {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  city String
  state String
  shows Show[]
}

// TODO: Should there be another model for VideoTracks with timestamp ?
model Video {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  videoId String @unique
  tracks Track[] @relation(fields: [trackIDs], references: [id] ) // onDelete: SetNull
  trackIDs String[] @db.ObjectId
}

//  model Comment {
//    id: ID!
//    author: User! @relation(name: "CommentToUser", onDelete: SetNull)
//    text: String
//    rating: Int
//  }

enum AudioSourceProvider {
  archive
  spotify
  youtube
  amazon
  apple
}